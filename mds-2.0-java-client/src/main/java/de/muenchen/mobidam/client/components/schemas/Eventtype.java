package org.openapijsonschematools.client.components.schemas;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.openapijsonschematools.client.configurations.JsonSchemaKeywordFlags;
import org.openapijsonschematools.client.configurations.SchemaConfiguration;
import org.openapijsonschematools.client.exceptions.ValidationException;
import org.openapijsonschematools.client.schemas.SetMaker;
import org.openapijsonschematools.client.schemas.validation.JsonSchema;
import org.openapijsonschematools.client.schemas.validation.JsonSchemaInfo;
import org.openapijsonschematools.client.schemas.validation.PathToSchemasMap;
import org.openapijsonschematools.client.schemas.validation.StringEnumValidator;
import org.openapijsonschematools.client.schemas.validation.StringSchemaValidator;
import org.openapijsonschematools.client.schemas.validation.StringValueMethod;
import org.openapijsonschematools.client.schemas.validation.ValidationMetadata;

public class Eventtype {
    // nest classes so all schemas and input/output classes can be public
    
    public enum StringEventtypeEnums implements StringValueMethod {
        AGENCY_DROP_OFF("agency_drop_off"),
        AGENCY_PICK_UP("agency_pick_up"),
        BATTERY_CHARGED("battery_charged"),
        BATTERY_LOW("battery_low"),
        CHANGED_GEOGRAPHIES("changed_geographies"),
        CHARGING_END("charging_end"),
        CHARGING_START("charging_start"),
        COMMS_LOST("comms_lost"),
        COMMS_RESTORED("comms_restored"),
        COMPLIANCE_PICK_UP("compliance_pick_up"),
        CUSTOMER_CANCELLATION("customer_cancellation"),
        DECOMMISSIONED("decommissioned"),
        DRIVER_CANCELLATION("driver_cancellation"),
        FUELING_END("fueling_end"),
        FUELING_START("fueling_start"),
        LOCATED("located"),
        MAINTENANCE("maintenance"),
        MAINTENANCE_END("maintenance_end"),
        MAINTENANCE_PICK_UP("maintenance_pick_up"),
        NOT_LOCATED("not_located"),
        OFF_HOURS("off_hours"),
        ON_HOURS("on_hours"),
        ORDER_DROP_OFF("order_drop_off"),
        ORDER_PICK_UP("order_pick_up"),
        PASSENGER_CANCELLATION("passenger_cancellation"),
        PROVIDER_CANCELLATION("provider_cancellation"),
        PROVIDER_DROP_OFF("provider_drop_off"),
        REBALANCE_PICK_UP("rebalance_pick_up"),
        RECOMMISSION("recommission"),
        REMOTE_END("remote_end"),
        REMOTE_START("remote_start"),
        RESERVATION_CANCEL("reservation_cancel"),
        RESERVATION_START("reservation_start"),
        RESERVATION_STOP("reservation_stop"),
        SERVICE_END("service_end"),
        SERVICE_START("service_start"),
        SYSTEM_RESUME("system_resume"),
        SYSTEM_SUSPEND("system_suspend"),
        TRIP_CANCEL("trip_cancel"),
        TRIP_END("trip_end"),
        TRIP_ENTER_JURISDICTION("trip_enter_jurisdiction"),
        TRIP_LEAVE_JURISDICTION("trip_leave_jurisdiction"),
        TRIP_PAUSE("trip_pause"),
        TRIP_RESUME("trip_resume"),
        TRIP_START("trip_start"),
        TRIP_STOP("trip_stop"),
        UNSPECIFIED("unspecified");
        private final String value;
    
        StringEventtypeEnums(String value) {
            this.value = value;
        }
        public String value() {
            return this.value;
        }
    }
    
    
    public sealed interface Eventtype1Boxed permits Eventtype1BoxedString {
        @Nullable Object getData();
    }
    
    public record Eventtype1BoxedString(String data) implements Eventtype1Boxed {
        @Override
        public @Nullable Object getData() {
            return data;
        }
    }
    
    
    
    public static class Eventtype1 extends JsonSchema<Eventtype1Boxed> implements StringSchemaValidator<Eventtype1BoxedString>, StringEnumValidator<StringEventtypeEnums> {
        /*
        NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
        Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
    
        Do not edit the class manually.
    
        Events are possible transitions between vehicle states.
        */
        private static @Nullable Eventtype1 instance = null;
    
        protected Eventtype1() {
            super(new JsonSchemaInfo()
                .type(Set.of(
                    String.class
                ))
                .enumValues(SetMaker.makeSet(
                    "agency_drop_off",
                    "agency_pick_up",
                    "battery_charged",
                    "battery_low",
                    "changed_geographies",
                    "charging_end",
                    "charging_start",
                    "comms_lost",
                    "comms_restored",
                    "compliance_pick_up",
                    "customer_cancellation",
                    "decommissioned",
                    "driver_cancellation",
                    "fueling_end",
                    "fueling_start",
                    "located",
                    "maintenance",
                    "maintenance_end",
                    "maintenance_pick_up",
                    "not_located",
                    "off_hours",
                    "on_hours",
                    "order_drop_off",
                    "order_pick_up",
                    "passenger_cancellation",
                    "provider_cancellation",
                    "provider_drop_off",
                    "rebalance_pick_up",
                    "recommission",
                    "remote_end",
                    "remote_start",
                    "reservation_cancel",
                    "reservation_start",
                    "reservation_stop",
                    "service_end",
                    "service_start",
                    "system_resume",
                    "system_suspend",
                    "trip_cancel",
                    "trip_end",
                    "trip_enter_jurisdiction",
                    "trip_leave_jurisdiction",
                    "trip_pause",
                    "trip_resume",
                    "trip_start",
                    "trip_stop",
                    "unspecified"
                ))
            );
        }
    
        public static Eventtype1 getInstance() {
            if (instance == null) {
                instance = new Eventtype1();
            }
            return instance;
        }
        
        @Override
        public String validate(String arg, SchemaConfiguration configuration) throws ValidationException {
            Set<List<Object>> pathSet = new HashSet<>();
            List<Object> pathToItem = List.of("args[0");
            String castArg = castToAllowedTypes(arg, pathToItem, pathSet);
            SchemaConfiguration usedConfiguration = Objects.requireNonNullElseGet(configuration, () -> new SchemaConfiguration(new JsonSchemaKeywordFlags.Builder().build()));
            ValidationMetadata validationMetadata = new ValidationMetadata(pathToItem, usedConfiguration, new PathToSchemasMap(), new LinkedHashSet<>());
            getPathToSchemas(this, castArg, validationMetadata, pathSet);
            return castArg;
        }
        
        @Override
        public String validate(StringEventtypeEnums arg,SchemaConfiguration configuration) throws ValidationException {
            return validate(arg.value(), configuration);
        }
        
        @Override
        public @Nullable Object validate(@Nullable Object arg, SchemaConfiguration configuration) throws ValidationException {
            if (arg instanceof String) {
                return validate((String) arg, configuration);
            }
            throw new ValidationException("Invalid input type="+getClass(arg)+". It can't be validated by this schema");
        }        
        @Override
        public @Nullable Object getNewInstance(@Nullable Object arg, List<Object> pathToItem, PathToSchemasMap pathToSchemas) {
            if (arg instanceof String) {
                return getNewInstance((String) arg, pathToItem, pathToSchemas);
            }
            throw new RuntimeException("Invalid input type="+getClass(arg)+". It can't be instantiated by this schema");
        }
        @Override
        public Eventtype1BoxedString validateAndBox(String arg, SchemaConfiguration configuration) throws ValidationException {
            return new Eventtype1BoxedString(validate(arg, configuration));
        }
        @Override
        public Eventtype1Boxed validateAndBox(@Nullable Object arg, SchemaConfiguration configuration) throws ValidationException {
            if (arg instanceof String castArg) {
                return validateAndBox(castArg, configuration);
            }
            throw new ValidationException("Invalid input type="+getClass(arg)+". It can't be validated by this schema");
        }
    }
}
